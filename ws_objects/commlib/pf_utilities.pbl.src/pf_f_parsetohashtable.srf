$PBExportHeader$pf_f_parsetohashtable.srf
$PBExportComments$주어진 문자열을 HashTable (Name&Value Collection) 으로 구문 분석합니다
global type pf_f_parsetohashtable from function_object
end type

forward prototypes
global function long pf_f_parsetohashtable (string as_query, string as_delimiter, ref pf_n_hashtable anv_result)
end prototypes

global function long pf_f_parsetohashtable (string as_query, string as_delimiter, ref pf_n_hashtable anv_result);// 주어진 문자열을 HashTable (Name&Value Collection) 으로 구문 분석합니다
// 파라미터 :
//    1. as_query : 파싱할 문자열(예: OnVSplitScroll=NoResize; DDDWObject=dddw_arg)
// 결과값 : Name 과 Value 컬렉션 값을 갖는 HashTable 리턴

if not isvalid(anv_result) then
	anv_result = create pf_n_hashtable
else
	anv_result.of_clear()
end if

// 단일 파라미터로 파싱
string ls_parms[], ls_key, ls_data
long ll_parmcnt, ll_cnt, ll_pos

ll_parmcnt = pf_f_parsetoarray(as_query, as_delimiter, ls_parms[])

// 키=값 형태 파라미터를 HashTable 에 보관
for ll_cnt = 1 to ll_parmcnt
	ll_pos = pos(ls_parms[ll_cnt], '=')
	if ll_pos > 0 then
		ls_key = trim(left(ls_parms[ll_cnt], ll_pos - 1))
		ls_data = trim(mid(ls_parms[ll_cnt], ll_pos + 1))
		anv_result.of_put(ls_key, ls_data)
	end if
next

// 결과값 리턴
return anv_result.of_size()

end function

