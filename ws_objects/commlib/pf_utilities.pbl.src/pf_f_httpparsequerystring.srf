$PBExportHeader$pf_f_httpparsequerystring.srf
$PBExportComments$주어진 URL 문자열을 HashTable (Name&Value Collection) 으로 구문 분석합니다
global type pf_f_httpparsequerystring from function_object
end type

forward prototypes
global function pf_n_hashtable pf_f_httpparsequerystring (string as_query)
end prototypes

global function pf_n_hashtable pf_f_httpparsequerystring (string as_query);// 주어진 URL 문자열을 HashTable (Name&Value Collection) 으로 구문 분석합니다
// 파라미터 :
//    1. as_query : 파싱할 URL 문자열(예: http://www.appeon.com/index.html?parm1=asdf&parm2=1234
// 결과값 : Name 과 Value 컬렉션 값을 갖는 HashTable 리턴

pf_n_regexp lnv_regexp
pf_n_hashtable lnv_result
long ll_pos

// URL 패턴 검증
lnv_regexp = create pf_n_regexp
if lnv_regexp.of_validate_url(as_query) = false then
	messagebox('알림', '잘못된 URL 정보입니다~r~n' + as_query)
	return lnv_result
end if

lnv_result = create pf_n_hashtable

// 파라미터만 영역 잘라 오기
ll_pos = pos(as_query, '?')
if ll_pos > 0 then
	as_query = mid(as_query, ll_pos + 1)
end if

// 단일 파라미터로 파싱
string ls_parms[], ls_key, ls_data
long ll_parmcnt, ll_cnt

ll_parmcnt = pf_f_parsetoarray(as_query, '&', ls_parms[])

// 키=값 형태 파라미터를 HashTable 에 보관
for ll_cnt = 1 to ll_parmcnt
	ll_pos = pos(ls_parms[ll_cnt], '=')
	if ll_pos > 0 then
		ls_key = trim(left(ls_parms[ll_cnt], ll_pos - 1))
		ls_data = trim(mid(ls_parms[ll_cnt], ll_pos + 1))
		lnv_result.of_put(ls_key, ls_data)
	end if
next

// 결과값 리턴
return lnv_result

end function

